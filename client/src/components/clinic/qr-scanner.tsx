import { useState, useRef, useCallback } from "react";
import { motion } from "framer-motion";
import { Camera, Scan, CheckCircle, XCircle, User, Phone, Calendar, AlertTriangle, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

interface PatientProfile {\n  patientId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  dateOfBirth?: string;\n  gender?: string;\n  bloodType?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  emergencyContactName?: string;\n  emergencyContactPhone?: string;\n  emergencyContactRelation?: string;\n  allergies?: string[];\n  medications?: string[];\n  medicalConditions?: string[];\n  insuranceProvider?: string;\n  insurancePolicyNumber?: string;\n  additionalNotes?: string;\n}\n\ninterface QRScannerProps {\n  onPatientFound: (patient: PatientProfile) => void;\n  clinicId?: string;\n}\n\nexport default function QRScanner({ onPatientFound, clinicId }: QRScannerProps) {\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanResult, setScanResult] = useState<string | null>(null);\n  const [patientProfile, setPatientProfile] = useState<PatientProfile | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [manualInput, setManualInput] = useState(\"\");\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  // Mock patient data for demonstration\n  const mockPatientData: Record<string, PatientProfile> = {\n    \"patient-001\": {\n      patientId: \"patient-001\",\n      firstName: \"John\",\n      lastName: \"Doe\",\n      email: \"john.doe@email.com\",\n      phone: \"+1 (555) 123-4567\",\n      dateOfBirth: \"1985-03-15\",\n      gender: \"male\",\n      bloodType: \"O+\",\n      address: \"123 Main Street\",\n      city: \"Anytown\",\n      state: \"CA\",\n      zipCode: \"12345\",\n      emergencyContactName: \"Jane Doe\",\n      emergencyContactPhone: \"+1 (555) 987-6543\",\n      emergencyContactRelation: \"spouse\",\n      allergies: [\"Penicillin\", \"Shellfish\"],\n      medications: [\"Lisinopril 10mg\", \"Metformin 500mg\"],\n      medicalConditions: [\"Hypertension\", \"Type 2 Diabetes\"],\n      insuranceProvider: \"Blue Cross Blue Shield\",\n      insurancePolicyNumber: \"BC123456789\",\n      additionalNotes: \"Patient prefers morning appointments. Has anxiety about needles.\"\n    }\n  };\n\n  const startCamera = useCallback(async () => {\n    try {\n      setIsScanning(true);\n      setError(null);\n      \n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: \"environment\" }\n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n      }\n    } catch (err) {\n      setError(\"Camera access denied. Please allow camera permissions or use manual input.\");\n      setIsScanning(false);\n    }\n  }, []);\n\n  const stopCamera = useCallback(() => {\n    if (videoRef.current && videoRef.current.srcObject) {\n      const stream = videoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    setIsScanning(false);\n  }, []);\n\n  const processQRData = async (qrData: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Parse QR code data\n      const parsedData = JSON.parse(qrData);\n      \n      if (parsedData.type !== \"CLINICFINDER_PATIENT\") {\n        throw new Error(\"Invalid QR code format\");\n      }\n      \n      const patientId = parsedData.patientId;\n      \n      // Simulate API call to fetch patient data\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // For demo, use mock data or default patient\n      const patient = mockPatientData[patientId] || {\n        patientId: patientId,\n        firstName: \"Demo\",\n        lastName: \"Patient\",\n        email: \"demo.patient@email.com\",\n        phone: \"+1 (555) 000-0000\",\n        dateOfBirth: \"1990-01-01\",\n        gender: \"other\",\n        emergencyContactName: \"Emergency Contact\",\n        emergencyContactPhone: \"+1 (555) 911-0000\",\n        emergencyContactRelation: \"friend\"\n      };\n      \n      setPatientProfile(patient);\n      onPatientFound(patient);\n      setScanResult(\"Patient profile loaded successfully!\");\n      \n    } catch (err) {\n      setError(\"Failed to load patient profile. Please try again or contact support.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleManualInput = async () => {\n    if (!manualInput.trim()) {\n      setError(\"Please enter a patient ID or QR code data\");\n      return;\n    }\n    \n    // Try to process as JSON first, then as patient ID\n    try {\n      await processQRData(manualInput);\n    } catch {\n      // If not JSON, treat as patient ID\n      const mockQRData = JSON.stringify({\n        type: \"CLINICFINDER_PATIENT\",\n        patientId: manualInput,\n        timestamp: new Date().toISOString(),\n        version: \"1.0\"\n      });\n      await processQRData(mockQRData);\n    }\n  };\n\n  const simulateScan = () => {\n    const demoQRData = JSON.stringify({\n      type: \"CLINICFINDER_PATIENT\",\n      patientId: \"patient-001\",\n      timestamp: new Date().toISOString(),\n      version: \"1.0\"\n    });\n    processQRData(demoQRData);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <motion.div\n        initial={{ y: 20, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"space-y-6\"\n      >\n        {/* Header */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-3 mb-4\">\n              <Scan className=\"w-8 h-8 text-primary\" />\n              <CardTitle className=\"text-2xl font-bold\">Patient QR Scanner</CardTitle>\n            </div>\n            <CardDescription>\n              Scan patient QR codes to instantly access their medical profiles\n            </CardDescription>\n          </CardHeader>\n        </Card>\n\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Scanner Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Camera className=\"w-5 h-5\" />\n                QR Code Scanner\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Camera View */}\n              <div className=\"relative\">\n                <div className=\"aspect-square bg-gray-100 rounded-lg overflow-hidden relative\">\n                  {isScanning ? (\n                    <video\n                      ref={videoRef}\n                      className=\"w-full h-full object-cover\"\n                      autoPlay\n                      playsInline\n                      muted\n                    />\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full\">\n                      <div className=\"text-center\">\n                        <Camera className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                        <p className=\"text-gray-500\">Camera not active</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Scanning overlay */}\n                  {isScanning && (\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"w-48 h-48 border-2 border-primary rounded-lg relative\">\n                        <div className=\"absolute top-0 left-0 w-6 h-6 border-t-4 border-l-4 border-primary\"></div>\n                        <div className=\"absolute top-0 right-0 w-6 h-6 border-t-4 border-r-4 border-primary\"></div>\n                        <div className=\"absolute bottom-0 left-0 w-6 h-6 border-b-4 border-l-4 border-primary\"></div>\n                        <div className=\"absolute bottom-0 right-0 w-6 h-6 border-b-4 border-r-4 border-primary\"></div>\n                        \n                        {/* Scanning line animation */}\n                        <motion.div\n                          className=\"absolute left-0 right-0 h-0.5 bg-primary\"\n                          animate={{\n                            y: [0, 192, 0]\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                <canvas\n                  ref={canvasRef}\n                  className=\"hidden\"\n                  width=\"640\"\n                  height=\"480\"\n                />\n              </div>\n\n              {/* Camera Controls */}\n              <div className=\"flex gap-2\">\n                {!isScanning ? (\n                  <Button onClick={startCamera} className=\"flex-1\">\n                    <Camera className=\"w-4 h-4 mr-2\" />\n                    Start Camera\n                  </Button>\n                ) : (\n                  <Button onClick={stopCamera} variant=\"destructive\" className=\"flex-1\">\n                    Stop Camera\n                  </Button>\n                )}\n                \n                <Button onClick={simulateScan} variant=\"outline\">\n                  Demo Scan\n                </Button>\n              </div>\n\n              {/* Manual Input */}\n              <div className=\"border-t pt-4\">\n                <Label htmlFor=\"manual-input\">Manual Patient ID Entry</Label>\n                <div className=\"flex gap-2 mt-2\">\n                  <Input\n                    id=\"manual-input\"\n                    placeholder=\"Enter patient ID or QR data\"\n                    value={manualInput}\n                    onChange={(e) => setManualInput(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleManualInput()}\n                  />\n                  <Button onClick={handleManualInput} disabled={isLoading}>\n                    {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : \"Load\"}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Results Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Patient Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading && (\n                <div className=\"flex items-center justify-center p-8\">\n                  <div className=\"text-center\">\n                    <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-primary\" />\n                    <p className=\"text-gray-600\">Loading patient profile...</p>\n                  </div>\n                </div>\n              )}\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <XCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              {scanResult && !error && (\n                <Alert className=\"mb-4\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{scanResult}</AlertDescription>\n                </Alert>\n              )}\n\n              {patientProfile && (\n                <div className=\"space-y-4\">\n                  {/* Basic Info */}\n                  <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n                    <h3 className=\"font-semibold text-green-900 mb-3\">Patient Details</h3>\n                    <div className=\"grid grid-cols-1 gap-2 text-sm\">\n                      <div><strong>Name:</strong> {patientProfile.firstName} {patientProfile.lastName}</div>\n                      <div><strong>Email:</strong> {patientProfile.email}</div>\n                      <div><strong>Phone:</strong> {patientProfile.phone}</div>\n                      {patientProfile.dateOfBirth && (\n                        <div><strong>DOB:</strong> {new Date(patientProfile.dateOfBirth).toLocaleDateString()}</div>\n                      )}\n                      {patientProfile.gender && (\n                        <div><strong>Gender:</strong> {patientProfile.gender}</div>\n                      )}\n                      {patientProfile.bloodType && (\n                        <div><strong>Blood Type:</strong> {patientProfile.bloodType}</div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Emergency Contact */}\n                  {patientProfile.emergencyContactName && (\n                    <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                      <h3 className=\"font-semibold text-blue-900 mb-3\">Emergency Contact</h3>\n                      <div className=\"grid grid-cols-1 gap-2 text-sm\">\n                        <div><strong>Name:</strong> {patientProfile.emergencyContactName}</div>\n                        <div><strong>Phone:</strong> {patientProfile.emergencyContactPhone}</div>\n                        <div><strong>Relation:</strong> {patientProfile.emergencyContactRelation}</div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Medical Information */}\n                  {(patientProfile.allergies?.length || patientProfile.medications?.length || patientProfile.medicalConditions?.length) && (\n                    <div className=\"bg-yellow-50 p-4 rounded-lg border border-yellow-200\">\n                      <h3 className=\"font-semibold text-yellow-900 mb-3 flex items-center gap-2\">\n                        <AlertTriangle className=\"w-4 h-4\" />\n                        Medical Information\n                      </h3>\n                      \n                      {patientProfile.allergies?.length && (\n                        <div className=\"mb-3\">\n                          <strong className=\"text-red-700\">Allergies:</strong>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {patientProfile.allergies.map((allergy, index) => (\n                              <Badge key={index} variant=\"destructive\" className=\"text-xs\">\n                                {allergy}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {patientProfile.medications?.length && (\n                        <div className=\"mb-3\">\n                          <strong>Current Medications:</strong>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {patientProfile.medications.map((medication, index) => (\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                {medication}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {patientProfile.medicalConditions?.length && (\n                        <div>\n                          <strong>Medical Conditions:</strong>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {patientProfile.medicalConditions.map((condition, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                {condition}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Insurance */}\n                  {patientProfile.insuranceProvider && (\n                    <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200\">\n                      <h3 className=\"font-semibold text-gray-900 mb-3\">Insurance Information</h3>\n                      <div className=\"grid grid-cols-1 gap-2 text-sm\">\n                        <div><strong>Provider:</strong> {patientProfile.insuranceProvider}</div>\n                        {patientProfile.insurancePolicyNumber && (\n                          <div><strong>Policy:</strong> {patientProfile.insurancePolicyNumber}</div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Additional Notes */}\n                  {patientProfile.additionalNotes && (\n                    <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n                      <h3 className=\"font-semibold text-purple-900 mb-3\">Additional Notes</h3>\n                      <p className=\"text-sm text-purple-800\">{patientProfile.additionalNotes}</p>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {!patientProfile && !isLoading && !error && (\n                <div className=\"text-center p-8 text-gray-500\">\n                  <Scan className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                  <p>Scan a patient QR code to view their profile</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </motion.div>\n    </div>\n  );\n}"
      